<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on gruchalski.com</title>
    <link>https://gruchalski.com/tags/testing/</link>
    <description>Recent content in testing on gruchalski.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gruchalski.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On software testing with dockertest</title>
      <link>https://gruchalski.com/posts/2021-04-24-on-software-testing-with-dockertest/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-04-24-on-software-testing-with-dockertest/</guid>
      <description>Software almost never runs in isolation. Today&amp;rsquo;s systems integrate with a vast number of external services. Ensuring reliability is difficult because the external dependencies, be it a database or an authentication system, adds an element of unpredictability which is difficult to emulate in isolation. A reliable system should account for the behavior of its dependencies. What does it help that an API is up and running when the underlying service it talks to hasn&amp;rsquo;t been accounted for a specific edge case and is causing an unexpected latency to my clients under certain conditions?</description>
    </item>
    
  </channel>
</rss>
