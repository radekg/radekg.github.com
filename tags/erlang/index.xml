<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>erlang on gruchalski.com</title>
    <link>https://gruchalski.com/tags/erlang/</link>
    <description>Recent content in erlang on gruchalski.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Dec 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gruchalski.com/tags/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gossiperl   gossip middleware in Erlang</title>
      <link>https://gruchalski.com/posts/2014-12-09-gossiperl-gossip-middleware-in-erlang/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2014-12-09-gossiperl-gossip-middleware-in-erlang/</guid>
      <description>Today I&amp;rsquo;ve released a project called gossiperl. Gossiperl is a language agnostic gossip middleware written in Erlang. The purpose of the project was purely research on gossip based systems, as well as, learning Erlang.
Main intent was to create a common communication middleware enabled over gossip using a standard binary transport mechanism. Gossiperl is a result of over 6 months of research, reading, learning, planning and implementation. Gossiperl uses Apache Thrift binary serialisation over UDP.</description>
    </item>
    
    <item>
      <title>Apache Thrift via UDP in Erlang</title>
      <link>https://gruchalski.com/posts/2014-10-12-apache-thrift-via-udp-in-erlang/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2014-10-12-apache-thrift-via-udp-in-erlang/</guid>
      <description>A few months ago I have started learning Erlang, mostly for fun but it was right about time to jump on the functional bandwagon. The best way to learn a new language is to find an engaging project, in my case its been something what has been on my mind for quite a while: a cloud communication protocol / framework for distributed computing. Some basic principles of what it is about can be found here: CloudDDS.</description>
    </item>
    
    <item>
      <title>Erflux, InfluxDB client for Erlang</title>
      <link>https://gruchalski.com/posts/2014-10-21-erflux-influxdb-client-for-erlang/</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2014-10-21-erflux-influxdb-client-for-erlang/</guid>
      <description>Itâ€™s been already a month since I released erflux on github. Erflux is an Erlang client for InfluxDB HTTP protocol.
Installation {deps, [ {erflux, &amp;#34;.*&amp;#34;, {git, &amp;#34;git://github.com/radekg/erflux.git&amp;#34;, {tag, &amp;#34;version-1&amp;#34;}}} }]} and run
./rebar get-deps  Configuration Erflux allows configuring a number of parameters:
 InfluxDB host, default 127.0.0.1 InfluxDB port, default 8086 username, default: root password, default: root SSL usage, default: false timeout, default: infinity  The simplest way of applying configuration is to use application:set_env, like the example below:</description>
    </item>
    
  </channel>
</rss>