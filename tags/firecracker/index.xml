<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>firecracker on gruchalski.com</title>
    <link>https://gruchalski.com/tags/firecracker/</link>
    <description>Recent content in firecracker on gruchalski.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gruchalski.com/tags/firecracker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Launching Consul cluster with firebuild and other news</title>
      <link>https://gruchalski.com/posts/2021-04-14-launching-consul-cluster-with-firebuild/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-04-14-launching-consul-cluster-with-firebuild/</guid>
      <description>Some two months ago, when I started the Firecracker journey, I set myself a goal to run en etcd cluster in Firecracker microVMs. Many lines of code later, after tackling the problem the hard way, there&amp;rsquo;s an outcome.
Okay, it&amp;rsquo;s not etcd but rather HashiCorp Consul.
Here&amp;rsquo;s how a 3 node Consul cluster is launched with firebuild:
# Start Consul 1 with IP 192.168.127.10: sudo firebuild run \  --profile=standard \  --from=combust-labs/consul:1.</description>
    </item>
    
    <item>
      <title>Introducing firebuild</title>
      <link>https://gruchalski.com/posts/2021-03-23-introducing-firebuild/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-03-23-introducing-firebuild/</guid>
      <description>what is Firecracker Firecracker is a virtualization technology for creating and managing secure, multi-tenant services suited for container-like and serverless scenarios. Firecracker workloads run in virtual machines, not containers. Unlike containers, they benefit from extra isolation properties provided by the hardware virtualization. Similar to containers, Firecracker VMs—microVMs—are lightweight and fast to boot. Like containers, they can be treated like cattle. They combine the flexibility of containers and security of virtual machines.</description>
    </item>
    
    <item>
      <title>Thoughts on creating VMMs from Docker images</title>
      <link>https://gruchalski.com/posts/2021-03-03-thoughts-on-creating-vmms-from-docker-images/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-03-03-thoughts-on-creating-vmms-from-docker-images/</guid>
      <description>Dockerfiles are awesome There is so much software out there packaged as Docker images. Operating systems, SQL and NoSQL databases, reverse proxies, compilers, everything. Safe to say, most of that software available as Docker containers is built from the common file format - the Dockerfile. Dockerfiles are awesome. They are recipes for getting a bit of software functional.
how have I been building Firecracker VMMs so far So far, all of my VMMs were built from Docker images using the following steps:</description>
    </item>
    
    <item>
      <title>The jailer</title>
      <link>https://gruchalski.com/posts/2021-02-19-the-jailer/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-19-the-jailer/</guid>
      <description>A Firecracker release comes with two binaries - the firecracker and the jailer programs. The jailer brings even more isolation options to Firecracker by creating and securing a unique execution environment for each VMM.
what can it do  check the uniqueness and validity of the VMM id, maximum length of 64 characters, alphanumeric only assign NUMA node check the existence of the exec_file run the VMM as a specific user / group assign cgroups assign the VMM into a dedicated network namespace a VMM can be damonized  what does it do This part comes from the jailer documentation1.</description>
    </item>
    
    <item>
      <title>It&#39;s all about the the Iface name</title>
      <link>https://gruchalski.com/posts/2021-02-18-its-all-about-the-iface-name/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-18-its-all-about-the-iface-name/</guid>
      <description>Last night&amp;rsquo;s problem with the second VMM conflicting on the network layer with the first one was indeed the veth0 name hard coded in firectl. I&amp;rsquo;ve added the --veth-iface-name argument to firectl and I am now able to start multiple VMMs on a single bridge.
sudo firectl \  --firecracker-binary=/usr/bin/firecracker \  --kernel=/firecracker/kernels/vmlinux-v5.8 \  --root-drive=/firecracker/filesystems/alpine-base-root.ext4 \  --cni-network=alpine \  --socket-path=/tmp/alpine.sock \  --ncpus=1 \  --memory=128 \  --veth-iface-name=vethalpine1 sudo firectl \  --firecracker-binary=/usr/bin/firecracker \  --kernel=/firecracker/kernels/vmlinux-v5.</description>
    </item>
    
    <item>
      <title>Bridging the Firecracker network gap</title>
      <link>https://gruchalski.com/posts/2021-02-17-bridging-the-firecracker-network-gap/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-17-bridging-the-firecracker-network-gap/</guid>
      <description>Today I have looked at creating my own bridge networks for Firecracker VMMs. I already used CNI setups when evaluating the HashiCorp Nomad firecracker task driver1. Back then I incorrectly stated that Firecracker depends on certain CNI plugins. It doesn&amp;rsquo;t, it can take advantage of any CNI setup as long as the tc-redirect-tap is in the chained plugins.
The Nomad task driver had some issues, briefly:
 every now and then, oddly, the task would never shut the VMM down and the only way to make the VMM gow down was to sudo kill nomad I tried updating the task driver to latest SDK version but I was not able to upgrade the Firecracker dependency past a specific commit, any version after that specific commit makes the VMM come up, the network setup to be there but the VMM is not reachable, really, really weird issue - reported it here  So today, I took a different route.</description>
    </item>
    
    <item>
      <title>Live resize Firecracker VMM drive</title>
      <link>https://gruchalski.com/posts/2021-02-16-live-resize-firecracker-vmm-drive/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-16-live-resize-firecracker-vmm-drive/</guid>
      <description>Towards the end of the Firecracker VMM with additional disks article1 I concluded that I didn&amp;rsquo;t know how to live resize an attached drive. It turns out it is possible and it&amp;rsquo;s very easy to do using the Firecracker VMM API.
To launch the VMM with the API, I have to drop the --no-api argument (obviously) and use --api-sock with the path to the socket file. In a production system, I&amp;rsquo;d use a directory other than /tmp.</description>
    </item>
    
    <item>
      <title>Firecracker VMM with additional disks</title>
      <link>https://gruchalski.com/posts/2021-02-14-firecracker-vmm-with-additional-disks/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-14-firecracker-vmm-with-additional-disks/</guid>
      <description>Before looking at the networking options, I have looked at adding extra drives to my Firecracker VMMs. Storing data on the root file system will not scale well long term. Additional disks will be a good solution to persist application specific data across reboots and upgrades.
Create the disk on the host First, create an additional file system on the host:
dd if=/dev/zero of=&amp;#34;/firecracker/filesystems/alpine-vol2.ext4&amp;#34; bs=1M count=500 mkfs.ext4 &amp;#34;/firecracker/filesystems/alpine-vol2.ext4&amp;#34; Reconfigure the VMM Change the VMM drives configuration:</description>
    </item>
    
    <item>
      <title>Launching Alpine Linux on Firecracker like a boss</title>
      <link>https://gruchalski.com/posts/2021-02-13-launching-alpine-linux-on-firecracker-like-a-boss/</link>
      <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-13-launching-alpine-linux-on-firecracker-like-a-boss/</guid>
      <description>The quest to launch an ETCD cluster on Firecracker starts here.
In this post, I&amp;rsquo;m describing how I&amp;rsquo;ve built my initial Alpine 3.13 VMM with OpenSSH and a dedicated sudoer user. In AWS, when one launches a Ubuntu instance, one can access it via ssh ubuntu@&amp;lt;address&amp;gt;, a CentOS VM is ssh centos@&amp;lt;address&amp;gt;. At the end of this write up, I&amp;rsquo;ll have ssh alpine@&amp;lt;address&amp;gt;. This VMM will have access to the outside world so I can install additional software and even ping the BBC!</description>
    </item>
    
    <item>
      <title>Vault on Firecracker with CNI plugins and Nomad</title>
      <link>https://gruchalski.com/posts/2021-02-07-vault-on-firecracker-with-cni-plugins-and-nomad/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-07-vault-on-firecracker-with-cni-plugins-and-nomad/</guid>
      <description>It&amp;rsquo;s good to know how to set up Firecracker VM by hand but that&amp;rsquo;s definitely suboptimal long term. So today I am looking at setting up Firecracker with CNI plugins. Firecracker needs four CNI plugins to operate: ptp, firewall, host-local and tc-redirect-tap. First three come from the CNI plugins1 repository, the last one comes from AWS Labs tc-redirect-tap2 repository.
Golang CNI plugins and tc-redirect-tap require golang to build. I&amp;rsquo;m using 1.</description>
    </item>
    
    <item>
      <title>Taking Firecracker for a spin</title>
      <link>https://gruchalski.com/posts/2021-02-06-taking-firecracker-for-a-spin/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gruchalski.com/posts/2021-02-06-taking-firecracker-for-a-spin/</guid>
      <description>Firecracker1 is recently making rounds on the internet as this relatively new, awesome technology for running lightweight VMs.
As something coming from AWS and powering AWS Lambda, my original perception was that it&amp;rsquo;s not easy to set up and use. However, this write from Julia Evans2 proved me wrong. So, as I have recently picked up a used Dell R720 with decent amount of RAM and CPUs, it was time to take these two for a spin together.</description>
    </item>
    
  </channel>
</rss>
